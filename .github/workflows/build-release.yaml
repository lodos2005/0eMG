# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow lets you compile your Go project using a SLSA3 compliant builder.
# This workflow will generate a so-called "provenance" file describing the steps
# that were performed to generate the final binary.
# The project is an initiative of the OpenSSF (openssf.org) and is developed at
# https://github.com/slsa-framework/slsa-github-generator.
# The provenance file can be verified using https://github.com/slsa-framework/slsa-verifier.
# For more information about SLSA and how it improves the supply-chain, visit slsa.dev.

name: SLSA Go releaser
on:
  workflow_dispatch:
  release:
    types: [created]

permissions:
  contents: write
  id-token: write # SLSA için gerekli izin

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.18] # Go versiyonunu belirt

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Build
      run: go build -o oemg ./...

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: oemg-${{ matrix.os }}
        path: oemg

  slsa-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write # SLSA için gerekli izin

    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Generate SLSA Provenance
      uses: slsa-framework/slsa-github-generator/.github/actions/generator@v1
      with:
        base64-subjects: true
        subjects: |
          ./artifacts/oemg-ubuntu-latest
          ./artifacts/oemg-windows-latest
          ./artifacts/oemg-macos-latest

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/oemg-ubuntu-latest
        asset_name: oemg-ubuntu-latest
        asset_content_type: application/octet-stream

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/oemg-windows-latest
        asset_name: oemg-windows-latest.exe
        asset_content_type: application/octet-stream

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/oemg-macos-latest
        asset_name: oemg-macos-latest
        asset_content_type: application/octet-stream

    - name: Upload SLSA Provenance
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/slsa-provenance.json
        asset_name: slsa-provenance.json
        asset_content_type: application/json
